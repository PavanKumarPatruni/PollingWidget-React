{"version":3,"sources":["assets/images/java.png","assets/images/kotlin.png","assets/images/js.png","assets/images/python.jpg","components/polling_widget/PollingWidget.js","components/polling_widget/PollingImageWidget.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PollingWidget","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","polling","isClicked","index","count","answers","map","answer","active","setState","onSelect","_this2","_this$state","answersComponent","length","itemsArray","forEach","percentage","percentComponent","percent","react_default","a","createElement","className","item","key","onClick","style","width","concat","push","question","Component","PollingImageWidget","img","javaImg","kotlinImg","jsImg","pythonImg","src","alt","App","poll","bind","assertThisInitialized","console","log","polling_widget_PollingWidget","polling_widget_PollingImageWidget","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.289cb8ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/java.64611413.png\";","module.exports = __webpack_public_path__ + \"static/media/kotlin.4ef59bd9.png\";","module.exports = __webpack_public_path__ + \"static/media/js.0cded3a3.png\";","module.exports = __webpack_public_path__ + \"static/media/python.3f69ff06.jpg\";","import React, { Component } from 'react'\n\nimport './polling_widget.scss'\n\nclass PollingWidget extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            polling: props.polling,\n            isClicked: false\n        };\n    }\n\n    onClick(index) {\n        let {polling} = this.state;\n        let count = 0; \n        polling.answers.map(answer => {\n            if (count++ === index) {\n                return answer.active = true;\n            } else {\n                return answer.active = false;\n            }\n        });\n\n        this.setState({\n            isClicked : true\n        });\n\n        this.props.onSelect(index);\n    }\n\n    render() {\n        let { polling, isClicked } = this.state;\n        let { answers } = polling;\n        \n        let answersComponent = null;\n\n        if (answers && answers.length > 0) {\n            let itemsArray = [];\n            answers.forEach((answer, index) => {\n\n                let percentage = 0;\n                let percentComponent = null;\n\n                if (isClicked) {\n                    percentage = answer.percent % 100;\n                    percentComponent = (<span className=\"percent\">{answer.percent}%</span>);\n                }\n\n                let item = (<div key={index} className={\"answer-div \" + (answer.active ? \"active\" : \"\")} onClick={() => this.onClick(index)}>\n                    <div className={\"answer-progress \" + (answer.active ? \"active\" : \"\")} style={{ width: `calc(${percentage}% - 20px)`}}></div>\n                    <div className=\"answer-overlay\">\n                        <span className=\"answer\">{answer.answer}</span>\n                        {percentComponent}\n                    </div>\n                </div>);\n                itemsArray.push(item);\n            });\n\n            answersComponent = itemsArray;\n        } else {\n            answersComponent = (<span>No answers found</span>);\n        }\n\n        return (\n            <div className=\"polling-div\">\n                <div className=\"question-div\">\n                    <span className=\"question\">{polling.question}</span>\n                </div>\n                <div className=\"answers-div\">\n                    {answersComponent}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PollingWidget;\n\n","import React, { Component } from 'react'\n\nimport './polling_widget.scss'\n\nimport javaImg from '../../assets/images/java.png';\nimport kotlinImg from '../../assets/images/kotlin.png';\nimport jsImg from '../../assets/images/js.png';\nimport pythonImg from '../../assets/images/python.jpg';\n\nclass PollingImageWidget extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            polling: props.polling,\n            isClicked: false\n        };\n    }\n\n    onClick(index) {\n        let {polling} = this.state;\n        let count = 0; \n        polling.answers.map(answer=> {\n            if (count++ === index) {\n                return answer.active = true;\n            } else {\n                return answer.active = false;\n            }\n        });\n\n        this.setState({\n            isClicked : true\n        });\n\n        this.props.onSelect(index);\n    }\n\n    render() {\n        let { polling, isClicked } = this.state;\n        let { answers } = polling;\n        \n        let answersComponent = null;\n\n        if (answers && answers.length > 0) {\n            let itemsArray = [];\n            answers.forEach((answer, index) => {\n\n                let percentage = 0;\n                let percentComponent = null;\n\n                if (isClicked) {\n                    percentage = answer.percent % 100;\n                    percentComponent = (<span className=\"percent\">{answer.percent}%</span>);\n                }\n\n                let img = '';\n                switch (index) {\n                    case 0:\n                        img = javaImg;\n                        break;\n                    case 1:\n                        img = kotlinImg;\n                        break;\n                    case 2:\n                        img = jsImg;\n                        break;\n                    case 3:\n                        img = pythonImg;\n                        break;\n                    default:\n                        img = javaImg;\n                        break\n                }\n\n                let item = (<div key={index} className={\"answer-div \" + (answer.active ? \"active\" : \"\")} onClick={() => this.onClick(index)}>\n                    <img className=\"answer-img\" src={img} alt={answer.answer}/>\n                    <div className=\"answer-image-div overlay\">\n                        <div className={\"answer-progress \" + (answer.active ? \"active\" : \"\")} style={{ width: `${percentage}%`}}></div>\n                        <div className=\"answer-overlay\">\n                            <span className=\"answer\">{answer.answer}</span>\n                            {percentComponent}\n                        </div>\n                    </div>\n                </div>);\n                itemsArray.push(item);\n            });\n\n            answersComponent = itemsArray;\n        } else {\n            answersComponent = (<span>No answers found</span>);\n        }\n\n        return (\n            <div className=\"polling-div\">\n                <div className=\"question-div\">\n                    <span className=\"question\">{polling.question}</span>\n                </div>\n                <div className=\"answers-div answers-image-div\">\n                    {answersComponent}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PollingImageWidget;\n\n","import React, {Component} from 'react';\n\nimport PollingWidget from './components/polling_widget/PollingWidget';\nimport PollingImageWidget from './components/polling_widget/PollingImageWidget';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      poll: {\n        question: 'Whats your favorite programming language to work?',\n        answers: [{\n          answer: 'Java',\n          img: './assets/images/java.png',\n          percent: '14'\n        }, {\n          answer: 'Kotlin',\n          img: './assets/images/kotlin.png',\n          percent: '56'\n        }, {\n          answer: 'JavaScript',\n          img: './assets/images/js.png',\n          percent: '22'\n        }, {\n          answer: 'Python',\n          img: './assets/images/python.jpg',\n          percent: '8'\n        }]\n      }\n    }\n\n      this.onSelect = this.onSelect.bind(this)\n  }\n\n  onSelect(index) {\n    console.log('Clicked on ' + index);\n  }\n\n  render() {\n\n    let {poll} = this.state;\n\n    return (\n      <div className=\"App\">\n        <PollingWidget polling={poll} onSelect={this.onSelect}/>\n        <PollingImageWidget polling={poll} onSelect={this.onSelect}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}